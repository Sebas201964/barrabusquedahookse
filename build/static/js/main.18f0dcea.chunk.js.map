{"version":3,"sources":["Historialficha.js","reportWebVitals.js","index.js"],"names":["Historial_ficha","_useState","useState","_useState2","_slicedToArray","ficha","setFichas","_useState3","_useState4","tablaFichas","setTablaFichas","_useState5","_useState6","busqueda","setBusqueda","XLSX","require","peticionGet","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","axios","get","then","response","data","catch","error","console","log","stop","apply","arguments","filtrar","terminoBusqueda","resultadosBusqueda","filter","elemento","id_ficha","toString","toLowerCase","includes","persona","id_persona","fecha_consulta","nombre","apellido","useEffect","_jsxs","className","children","_jsx","value","placeholder","onChange","e","target","FontAwesomeIcon","icon","faSearch","id","map","diagnostico","motivo_consulta","observaciones","onClick","table","document","getElementById","workbook","utils","table_to_book","writeFile","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","App"],"mappings":"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","file":"static/js/main.18f0dcea.chunk.js","sourcesContent":["import './Historialficha.css';\r\nimport {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport * as XLSX from 'xlsx/xlsx.mjs';\r\n\r\nfunction Historial_ficha() {\r\n\r\n  const [ficha, setFichas]= useState([]);\r\n  const [tablaFichas, setTablaFichas]= useState([]);\r\n  const [busqueda, setBusqueda]= useState(\"\");\r\n  \r\n  var XLSX = require(\"xlsx\");\r\n  const generateExcel = () => {\r\n    // Obtener la tabla\r\n    const table = document.getElementById('my-table');\r\n\r\n    // Convertir la tabla en un objeto de datos de Excel\r\n    const workbook = XLSX.utils.table_to_book(table);\r\n\r\n    // Descargar el archivo Excel\r\n    XLSX.writeFile(workbook, 'HISTORIAL FICHA.xlsx');\r\n  }\r\n\r\nconst peticionGet=async()=>{\r\n  await axios.get(\"http://localhost:8082/api/ficha/listar\")\r\n  .then(response=>{\r\n    setFichas(response.data);\r\n    setTablaFichas(response.data);\r\n  }).catch(error=>{\r\n    console.log(error);\r\n  })\r\n}\r\n\r\nconst handleChange=e=>{\r\n  setBusqueda(e.target.value);\r\n  filtrar(e.target.value);\r\n}\r\n\r\nconst filtrar=(terminoBusqueda)=>{\r\n  var resultadosBusqueda=tablaFichas.filter((elemento)=>{\r\n    if(elemento.id_ficha.toString().toLowerCase().includes(terminoBusqueda.toLowerCase())\r\n    || elemento.persona.id_persona.toString().toLowerCase().includes(terminoBusqueda.toLowerCase())\r\n    || elemento.fecha_consulta.toString().toLowerCase().includes(terminoBusqueda.toLowerCase())\r\n    || elemento.persona.nombre.toString().toLowerCase().includes(terminoBusqueda.toLowerCase())+elemento.persona.apellido.toString().toLowerCase().includes(terminoBusqueda.toLowerCase())\r\n    ){\r\n      return elemento;\r\n    }\r\n  });\r\n  setFichas(resultadosBusqueda);\r\n}\r\n\r\nuseEffect(()=>{\r\npeticionGet();\r\n},[])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <div className=\"containerInput\">\r\n        <input\r\n          className=\"form-control inputBuscar\"\r\n          value={busqueda}\r\n          placeholder=\"BÃºsqueda por Id Ficha,Id Persona, Fecha, Nombre\"\r\n          onChange={handleChange}\r\n        />\r\n        <button className=\"btn btn-success\">\r\n          <FontAwesomeIcon icon={faSearch}/>\r\n        </button>\r\n      </div>\r\n\r\n     <div className=\"table-responsive\">\r\n       <table id=\"my-table\" className=\"table table-sm table-bordered\">\r\n         <thead>\r\n           <tr>\r\n             <th>ID</th>\r\n             <th>DIAGNOSTICO</th>\r\n             <th>FECHA</th>\r\n             <th>MOTIVO</th>\r\n             <th>OBSERVACIONES</th>\r\n             <th>ID PERSONA</th>\r\n             <th>NOMBRE</th>\r\n           </tr>\r\n         </thead>\r\n\r\n         <tbody>\r\n           {ficha && \r\n           ficha.map((ficha)=>(\r\n             <tr key={ficha.id_ficha}>\r\n               <td>{ficha.id_ficha}</td>\r\n               <td>{ficha.diagnostico}</td>\r\n\r\n               <td>{ficha.fecha_consulta}</td>\r\n               <td>{ficha.motivo_consulta}</td>\r\n               <td>{ficha.observaciones}</td>\r\n               <td>{ficha.persona.id_persona}</td>\r\n               <td>{ficha.persona.nombre+\" \"+ficha.persona.apellido}</td>\r\n             </tr>\r\n           ))}\r\n         </tbody>\r\n\r\n       </table>\r\n      \r\n     </div>\r\n     <button onClick={generateExcel} className=\"mi-boton\">IMPRIMIR</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Historial_ficha;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Historialficha';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}